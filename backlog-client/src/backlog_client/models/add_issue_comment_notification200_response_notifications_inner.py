# coding: utf-8

"""
    Backlog API

    Backlog REST API specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from backlog_client.models.get_groups200_response_inner_created_user import GetGroups200ResponseInnerCreatedUser
from typing import Optional, Set
from typing_extensions import Self

class AddIssueCommentNotification200ResponseNotificationsInner(BaseModel):
    """
    AddIssueCommentNotification200ResponseNotificationsInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    already_read: Optional[StrictBool] = Field(default=None, alias="alreadyRead")
    reason: Optional[StrictInt] = Field(default=None, description="通知の種別：1:課題の担当者に設定2:課題にコメント3:課題の追加4:課題の更新5:ファイルを追加6:プロジェクトユーザーの追加9:その他10:プルリクエストの担当者に設定11:プルリクエストにコメント12:プルリクエストの追加13:プルリクエストの更新")
    user: Optional[GetGroups200ResponseInnerCreatedUser] = None
    resource_already_read: Optional[StrictBool] = Field(default=None, alias="resourceAlreadyRead")
    __properties: ClassVar[List[str]] = ["id", "alreadyRead", "reason", "user", "resourceAlreadyRead"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddIssueCommentNotification200ResponseNotificationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddIssueCommentNotification200ResponseNotificationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "alreadyRead": obj.get("alreadyRead"),
            "reason": obj.get("reason"),
            "user": GetGroups200ResponseInnerCreatedUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "resourceAlreadyRead": obj.get("resourceAlreadyRead")
        })
        return _obj


