# coding: utf-8

"""
    Backlog API

    Backlog REST API specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from backlog_client.models.get_groups200_response_inner_members_inner import GetGroups200ResponseInnerMembersInner
from backlog_client.models.get_issue_comment_notifications200_response_inner_user import GetIssueCommentNotifications200ResponseInnerUser
from backlog_client.models.get_issues200_response_inner_attachments_inner import GetIssues200ResponseInnerAttachmentsInner
from backlog_client.models.get_issues200_response_inner_issue_type import GetIssues200ResponseInnerIssueType
from backlog_client.models.get_issues200_response_inner_milestone_inner import GetIssues200ResponseInnerMilestoneInner
from backlog_client.models.get_issues200_response_inner_priority import GetIssues200ResponseInnerPriority
from backlog_client.models.get_recently_viewed_issues200_response_issue_stars_inner import GetRecentlyViewedIssues200ResponseIssueStarsInner
from typing import Optional, Set
from typing_extensions import Self

class AddRecentlyViewedIssue200Response(BaseModel):
    """
    AddRecentlyViewedIssue200Response
    """ # noqa: E501
    id: Optional[StrictInt] = None
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    issue_key: Optional[StrictStr] = Field(default=None, alias="issueKey")
    key_id: Optional[StrictInt] = Field(default=None, alias="keyId")
    issue_type: Optional[GetIssues200ResponseInnerIssueType] = Field(default=None, alias="issueType")
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    resolution: Optional[StrictStr] = None
    priority: Optional[GetIssues200ResponseInnerPriority] = None
    status: Optional[GetIssues200ResponseInnerIssueType] = None
    assignee: Optional[GetGroups200ResponseInnerMembersInner] = None
    category: Optional[List[Dict[str, Any]]] = None
    versions: Optional[List[Dict[str, Any]]] = None
    milestone: Optional[List[GetIssues200ResponseInnerMilestoneInner]] = None
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    due_date: Optional[StrictStr] = Field(default=None, alias="dueDate")
    estimated_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedHours")
    actual_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualHours")
    parent_issue_id: Optional[StrictInt] = Field(default=None, alias="parentIssueId")
    created_user: Optional[GetIssueCommentNotifications200ResponseInnerUser] = Field(default=None, alias="createdUser")
    created: Optional[datetime] = None
    updated_user: Optional[GetIssueCommentNotifications200ResponseInnerUser] = Field(default=None, alias="updatedUser")
    updated: Optional[datetime] = None
    custom_fields: Optional[List[Dict[str, Any]]] = Field(default=None, alias="customFields")
    attachments: Optional[List[GetIssues200ResponseInnerAttachmentsInner]] = None
    shared_files: Optional[List[Dict[str, Any]]] = Field(default=None, alias="sharedFiles")
    stars: Optional[List[GetRecentlyViewedIssues200ResponseIssueStarsInner]] = None
    __properties: ClassVar[List[str]] = ["id", "projectId", "issueKey", "keyId", "issueType", "summary", "description", "resolution", "priority", "status", "assignee", "category", "versions", "milestone", "startDate", "dueDate", "estimatedHours", "actualHours", "parentIssueId", "createdUser", "created", "updatedUser", "updated", "customFields", "attachments", "sharedFiles", "stars"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddRecentlyViewedIssue200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issue_type
        if self.issue_type:
            _dict['issueType'] = self.issue_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in milestone (list)
        _items = []
        if self.milestone:
            for _item_milestone in self.milestone:
                if _item_milestone:
                    _items.append(_item_milestone.to_dict())
            _dict['milestone'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_user
        if self.created_user:
            _dict['createdUser'] = self.created_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_user
        if self.updated_user:
            _dict['updatedUser'] = self.updated_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stars (list)
        _items = []
        if self.stars:
            for _item_stars in self.stars:
                if _item_stars:
                    _items.append(_item_stars.to_dict())
            _dict['stars'] = _items
        # set to None if resolution (nullable) is None
        # and model_fields_set contains the field
        if self.resolution is None and "resolution" in self.model_fields_set:
            _dict['resolution'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if due_date (nullable) is None
        # and model_fields_set contains the field
        if self.due_date is None and "due_date" in self.model_fields_set:
            _dict['dueDate'] = None

        # set to None if estimated_hours (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_hours is None and "estimated_hours" in self.model_fields_set:
            _dict['estimatedHours'] = None

        # set to None if actual_hours (nullable) is None
        # and model_fields_set contains the field
        if self.actual_hours is None and "actual_hours" in self.model_fields_set:
            _dict['actualHours'] = None

        # set to None if parent_issue_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_issue_id is None and "parent_issue_id" in self.model_fields_set:
            _dict['parentIssueId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddRecentlyViewedIssue200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "projectId": obj.get("projectId"),
            "issueKey": obj.get("issueKey"),
            "keyId": obj.get("keyId"),
            "issueType": GetIssues200ResponseInnerIssueType.from_dict(obj["issueType"]) if obj.get("issueType") is not None else None,
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "resolution": obj.get("resolution"),
            "priority": GetIssues200ResponseInnerPriority.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "status": GetIssues200ResponseInnerIssueType.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "assignee": GetGroups200ResponseInnerMembersInner.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "category": obj.get("category"),
            "versions": obj.get("versions"),
            "milestone": [GetIssues200ResponseInnerMilestoneInner.from_dict(_item) for _item in obj["milestone"]] if obj.get("milestone") is not None else None,
            "startDate": obj.get("startDate"),
            "dueDate": obj.get("dueDate"),
            "estimatedHours": obj.get("estimatedHours"),
            "actualHours": obj.get("actualHours"),
            "parentIssueId": obj.get("parentIssueId"),
            "createdUser": GetIssueCommentNotifications200ResponseInnerUser.from_dict(obj["createdUser"]) if obj.get("createdUser") is not None else None,
            "created": obj.get("created"),
            "updatedUser": GetIssueCommentNotifications200ResponseInnerUser.from_dict(obj["updatedUser"]) if obj.get("updatedUser") is not None else None,
            "updated": obj.get("updated"),
            "customFields": obj.get("customFields"),
            "attachments": [GetIssues200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "sharedFiles": obj.get("sharedFiles"),
            "stars": [GetRecentlyViewedIssues200ResponseIssueStarsInner.from_dict(_item) for _item in obj["stars"]] if obj.get("stars") is not None else None
        })
        return _obj


