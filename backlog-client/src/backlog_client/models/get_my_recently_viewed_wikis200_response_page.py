# coding: utf-8

"""
    Backlog API

    Backlog REST API specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from backlog_client.models.get_issue_comment_notifications200_response_inner_user import GetIssueCommentNotifications200ResponseInnerUser
from backlog_client.models.get_issues200_response_inner_priority import GetIssues200ResponseInnerPriority
from typing import Optional, Set
from typing_extensions import Self

class GetMyRecentlyViewedWikis200ResponsePage(BaseModel):
    """
    GetMyRecentlyViewedWikis200ResponsePage
    """ # noqa: E501
    id: Optional[StrictInt] = None
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    name: Optional[StrictStr] = None
    tags: Optional[List[GetIssues200ResponseInnerPriority]] = None
    created_user: Optional[GetIssueCommentNotifications200ResponseInnerUser] = Field(default=None, alias="createdUser")
    created: Optional[datetime] = None
    updated_user: Optional[GetIssueCommentNotifications200ResponseInnerUser] = Field(default=None, alias="updatedUser")
    updated: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "projectId", "name", "tags", "createdUser", "created", "updatedUser", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMyRecentlyViewedWikis200ResponsePage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_user
        if self.created_user:
            _dict['createdUser'] = self.created_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_user
        if self.updated_user:
            _dict['updatedUser'] = self.updated_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMyRecentlyViewedWikis200ResponsePage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "projectId": obj.get("projectId"),
            "name": obj.get("name"),
            "tags": [GetIssues200ResponseInnerPriority.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "createdUser": GetIssueCommentNotifications200ResponseInnerUser.from_dict(obj["createdUser"]) if obj.get("createdUser") is not None else None,
            "created": obj.get("created"),
            "updatedUser": GetIssueCommentNotifications200ResponseInnerUser.from_dict(obj["updatedUser"]) if obj.get("updatedUser") is not None else None,
            "updated": obj.get("updated")
        })
        return _obj


