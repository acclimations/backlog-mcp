# coding: utf-8

"""
    Backlog API

    Backlog REST API specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetNotifications200ResponseInnerIssue(BaseModel):
    """
    GetNotifications200ResponseInnerIssue
    """ # noqa: E501
    id: Optional[StrictInt] = None
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    issue_key: Optional[StrictStr] = Field(default=None, alias="issueKey")
    key_id: Optional[StrictInt] = Field(default=None, alias="keyId")
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    start_date: Optional[datetime] = Field(default=None, alias="startDate")
    due_date: Optional[datetime] = Field(default=None, alias="dueDate")
    estimated_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedHours")
    actual_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualHours")
    parent_issue_id: Optional[StrictInt] = Field(default=None, alias="parentIssueId")
    created: Optional[datetime] = None
    updated: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "projectId", "issueKey", "keyId", "summary", "description", "startDate", "dueDate", "estimatedHours", "actualHours", "parentIssueId", "created", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNotifications200ResponseInnerIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if estimated_hours (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_hours is None and "estimated_hours" in self.model_fields_set:
            _dict['estimatedHours'] = None

        # set to None if actual_hours (nullable) is None
        # and model_fields_set contains the field
        if self.actual_hours is None and "actual_hours" in self.model_fields_set:
            _dict['actualHours'] = None

        # set to None if parent_issue_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_issue_id is None and "parent_issue_id" in self.model_fields_set:
            _dict['parentIssueId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNotifications200ResponseInnerIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "projectId": obj.get("projectId"),
            "issueKey": obj.get("issueKey"),
            "keyId": obj.get("keyId"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "startDate": obj.get("startDate"),
            "dueDate": obj.get("dueDate"),
            "estimatedHours": obj.get("estimatedHours"),
            "actualHours": obj.get("actualHours"),
            "parentIssueId": obj.get("parentIssueId"),
            "created": obj.get("created"),
            "updated": obj.get("updated")
        })
        return _obj


