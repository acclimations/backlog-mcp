# coding: utf-8

"""
    Backlog API

    Backlog REST API specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from backlog_client.models.get_groups200_response_inner_members_inner import GetGroups200ResponseInnerMembersInner
from backlog_client.models.get_issue_comment_notifications200_response_inner_user import GetIssueCommentNotifications200ResponseInnerUser
from backlog_client.models.get_issues200_response_inner_priority import GetIssues200ResponseInnerPriority
from backlog_client.models.get_pull_requests200_response_inner_issue import GetPullRequests200ResponseInnerIssue
from typing import Optional, Set
from typing_extensions import Self

class GetPullRequests200ResponseInner(BaseModel):
    """
    GetPullRequests200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    repository_id: Optional[StrictInt] = Field(default=None, alias="repositoryId")
    number: Optional[StrictInt] = None
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    base: Optional[StrictStr] = None
    branch: Optional[StrictStr] = None
    status: Optional[GetIssues200ResponseInnerPriority] = None
    assignee: Optional[GetGroups200ResponseInnerMembersInner] = None
    issue: Optional[GetPullRequests200ResponseInnerIssue] = None
    base_commit: Optional[StrictStr] = Field(default=None, alias="baseCommit")
    branch_commit: Optional[StrictStr] = Field(default=None, alias="branchCommit")
    merge_commit: Optional[StrictStr] = Field(default=None, alias="mergeCommit")
    close_at: Optional[datetime] = Field(default=None, alias="closeAt")
    merge_at: Optional[datetime] = Field(default=None, alias="mergeAt")
    created_user: Optional[GetIssueCommentNotifications200ResponseInnerUser] = Field(default=None, alias="createdUser")
    created: Optional[datetime] = None
    updated_user: Optional[GetIssueCommentNotifications200ResponseInnerUser] = Field(default=None, alias="updatedUser")
    updated: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "projectId", "repositoryId", "number", "summary", "description", "base", "branch", "status", "assignee", "issue", "baseCommit", "branchCommit", "mergeCommit", "closeAt", "mergeAt", "createdUser", "created", "updatedUser", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPullRequests200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue
        if self.issue:
            _dict['issue'] = self.issue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_user
        if self.created_user:
            _dict['createdUser'] = self.created_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_user
        if self.updated_user:
            _dict['updatedUser'] = self.updated_user.to_dict()
        # set to None if base_commit (nullable) is None
        # and model_fields_set contains the field
        if self.base_commit is None and "base_commit" in self.model_fields_set:
            _dict['baseCommit'] = None

        # set to None if branch_commit (nullable) is None
        # and model_fields_set contains the field
        if self.branch_commit is None and "branch_commit" in self.model_fields_set:
            _dict['branchCommit'] = None

        # set to None if merge_commit (nullable) is None
        # and model_fields_set contains the field
        if self.merge_commit is None and "merge_commit" in self.model_fields_set:
            _dict['mergeCommit'] = None

        # set to None if close_at (nullable) is None
        # and model_fields_set contains the field
        if self.close_at is None and "close_at" in self.model_fields_set:
            _dict['closeAt'] = None

        # set to None if merge_at (nullable) is None
        # and model_fields_set contains the field
        if self.merge_at is None and "merge_at" in self.model_fields_set:
            _dict['mergeAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPullRequests200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "projectId": obj.get("projectId"),
            "repositoryId": obj.get("repositoryId"),
            "number": obj.get("number"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "base": obj.get("base"),
            "branch": obj.get("branch"),
            "status": GetIssues200ResponseInnerPriority.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "assignee": GetGroups200ResponseInnerMembersInner.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "issue": GetPullRequests200ResponseInnerIssue.from_dict(obj["issue"]) if obj.get("issue") is not None else None,
            "baseCommit": obj.get("baseCommit"),
            "branchCommit": obj.get("branchCommit"),
            "mergeCommit": obj.get("mergeCommit"),
            "closeAt": obj.get("closeAt"),
            "mergeAt": obj.get("mergeAt"),
            "createdUser": GetIssueCommentNotifications200ResponseInnerUser.from_dict(obj["createdUser"]) if obj.get("createdUser") is not None else None,
            "created": obj.get("created"),
            "updatedUser": GetIssueCommentNotifications200ResponseInnerUser.from_dict(obj["updatedUser"]) if obj.get("updatedUser") is not None else None,
            "updated": obj.get("updated")
        })
        return _obj


