# coding: utf-8

"""
    Backlog API

    Backlog REST API specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from backlog_client.models.add_custom_field_list_item200_response import AddCustomFieldListItem200Response

class TestAddCustomFieldListItem200Response(unittest.TestCase):
    """AddCustomFieldListItem200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddCustomFieldListItem200Response:
        """Test AddCustomFieldListItem200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddCustomFieldListItem200Response`
        """
        model = AddCustomFieldListItem200Response()
        if include_optional:
            return AddCustomFieldListItem200Response(
                id = 56,
                project_id = 56,
                type_id = 56,
                name = '',
                description = '',
                required = True,
                applicable_issue_types = [
                    None
                    ],
                allow_add_item = True,
                items = [
                    backlog_client.models.get_custom_fields_200_response_inner_items_inner.getCustomFields_200_response_inner_items_inner(
                        id = 56, 
                        name = '', 
                        display_order = 56, )
                    ]
            )
        else:
            return AddCustomFieldListItem200Response(
        )
        """

    def testAddCustomFieldListItem200Response(self):
        """Test AddCustomFieldListItem200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
